//+build !js
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shenzhen-go.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	shenzhen-go.proto

It has these top-level messages:
	Empty
	SaveRequest
	SetGraphPropertiesRequest
	DeleteChannelRequest
	CreateChannelRequest
	SetNodePropertiesRequest
	SetPositionRequest
	DisconnectPinRequest
	ConnectPinRequest
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SaveRequest struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
}

func (m *SaveRequest) Reset()                    { *m = SaveRequest{} }
func (m *SaveRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveRequest) ProtoMessage()               {}
func (*SaveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SaveRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

type SetGraphPropertiesRequest struct {
	Graph       string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PackagePath string `protobuf:"bytes,3,opt,name=package_path,json=packagePath" json:"package_path,omitempty"`
	IsCommand   bool   `protobuf:"varint,4,opt,name=is_command,json=isCommand" json:"is_command,omitempty"`
}

func (m *SetGraphPropertiesRequest) Reset()                    { *m = SetGraphPropertiesRequest{} }
func (m *SetGraphPropertiesRequest) String() string            { return proto.CompactTextString(m) }
func (*SetGraphPropertiesRequest) ProtoMessage()               {}
func (*SetGraphPropertiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetGraphPropertiesRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *SetGraphPropertiesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetGraphPropertiesRequest) GetPackagePath() string {
	if m != nil {
		return m.PackagePath
	}
	return ""
}

func (m *SetGraphPropertiesRequest) GetIsCommand() bool {
	if m != nil {
		return m.IsCommand
	}
	return false
}

type DeleteChannelRequest struct {
	Graph   string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Channel string `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
}

func (m *DeleteChannelRequest) Reset()                    { *m = DeleteChannelRequest{} }
func (m *DeleteChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteChannelRequest) ProtoMessage()               {}
func (*DeleteChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteChannelRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *DeleteChannelRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type CreateChannelRequest struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Anon  bool   `protobuf:"varint,4,opt,name=anon" json:"anon,omitempty"`
	Cap   uint64 `protobuf:"varint,5,opt,name=cap" json:"cap,omitempty"`
}

func (m *CreateChannelRequest) Reset()                    { *m = CreateChannelRequest{} }
func (m *CreateChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateChannelRequest) ProtoMessage()               {}
func (*CreateChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateChannelRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *CreateChannelRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateChannelRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateChannelRequest) GetAnon() bool {
	if m != nil {
		return m.Anon
	}
	return false
}

func (m *CreateChannelRequest) GetCap() uint64 {
	if m != nil {
		return m.Cap
	}
	return 0
}

type SetNodePropertiesRequest struct {
	Graph        string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Node         string `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Enabled      bool   `protobuf:"varint,4,opt,name=enabled" json:"enabled,omitempty"`
	Multiplicity uint32 `protobuf:"varint,5,opt,name=multiplicity" json:"multiplicity,omitempty"`
	Wait         bool   `protobuf:"varint,6,opt,name=wait" json:"wait,omitempty"`
	PartJson     string `protobuf:"bytes,7,opt,name=part_json,json=partJson" json:"part_json,omitempty"`
}

func (m *SetNodePropertiesRequest) Reset()                    { *m = SetNodePropertiesRequest{} }
func (m *SetNodePropertiesRequest) String() string            { return proto.CompactTextString(m) }
func (*SetNodePropertiesRequest) ProtoMessage()               {}
func (*SetNodePropertiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SetNodePropertiesRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *SetNodePropertiesRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SetNodePropertiesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetNodePropertiesRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SetNodePropertiesRequest) GetMultiplicity() uint32 {
	if m != nil {
		return m.Multiplicity
	}
	return 0
}

func (m *SetNodePropertiesRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

func (m *SetNodePropertiesRequest) GetPartJson() string {
	if m != nil {
		return m.PartJson
	}
	return ""
}

type SetPositionRequest struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Node  string `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	X     int64  `protobuf:"varint,3,opt,name=x" json:"x,omitempty"`
	Y     int64  `protobuf:"varint,4,opt,name=y" json:"y,omitempty"`
}

func (m *SetPositionRequest) Reset()                    { *m = SetPositionRequest{} }
func (m *SetPositionRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPositionRequest) ProtoMessage()               {}
func (*SetPositionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SetPositionRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *SetPositionRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SetPositionRequest) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *SetPositionRequest) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type DisconnectPinRequest struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Node  string `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Pin   string `protobuf:"bytes,3,opt,name=pin" json:"pin,omitempty"`
}

func (m *DisconnectPinRequest) Reset()                    { *m = DisconnectPinRequest{} }
func (m *DisconnectPinRequest) String() string            { return proto.CompactTextString(m) }
func (*DisconnectPinRequest) ProtoMessage()               {}
func (*DisconnectPinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DisconnectPinRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *DisconnectPinRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *DisconnectPinRequest) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

type ConnectPinRequest struct {
	Graph   string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Node    string `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Pin     string `protobuf:"bytes,3,opt,name=pin" json:"pin,omitempty"`
	Channel string `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
}

func (m *ConnectPinRequest) Reset()                    { *m = ConnectPinRequest{} }
func (m *ConnectPinRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectPinRequest) ProtoMessage()               {}
func (*ConnectPinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ConnectPinRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *ConnectPinRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ConnectPinRequest) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

func (m *ConnectPinRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*SaveRequest)(nil), "api.SaveRequest")
	proto.RegisterType((*SetGraphPropertiesRequest)(nil), "api.SetGraphPropertiesRequest")
	proto.RegisterType((*DeleteChannelRequest)(nil), "api.DeleteChannelRequest")
	proto.RegisterType((*CreateChannelRequest)(nil), "api.CreateChannelRequest")
	proto.RegisterType((*SetNodePropertiesRequest)(nil), "api.SetNodePropertiesRequest")
	proto.RegisterType((*SetPositionRequest)(nil), "api.SetPositionRequest")
	proto.RegisterType((*DisconnectPinRequest)(nil), "api.DisconnectPinRequest")
	proto.RegisterType((*ConnectPinRequest)(nil), "api.ConnectPinRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ShenzhenGo service

type ShenzhenGoClient interface {
	// CreateChannel makes a new channel.
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Empty, error)
	// ConnectPin connects a pin to a channel.
	ConnectPin(ctx context.Context, in *ConnectPinRequest, opts ...grpc.CallOption) (*Empty, error)
	// DeleteChannel deletes a channel (and all connections).
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*Empty, error)
	// DisconnectPin deletes the connection from a pin to a channel.
	DisconnectPin(ctx context.Context, in *DisconnectPinRequest, opts ...grpc.CallOption) (*Empty, error)
	// Save saves the graph to disk.
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*Empty, error)
	// SetGraphProperties changes metdata such as name and package path.
	SetGraphProperties(ctx context.Context, in *SetGraphPropertiesRequest, opts ...grpc.CallOption) (*Empty, error)
	// SetNodeProperties changes node metadata such as name and multiplicity.
	SetNodeProperties(ctx context.Context, in *SetNodePropertiesRequest, opts ...grpc.CallOption) (*Empty, error)
	// SetPosition changes the node position in the diagram.
	SetPosition(ctx context.Context, in *SetPositionRequest, opts ...grpc.CallOption) (*Empty, error)
}

type shenzhenGoClient struct {
	cc *grpc.ClientConn
}

func NewShenzhenGoClient(cc *grpc.ClientConn) ShenzhenGoClient {
	return &shenzhenGoClient{cc}
}

func (c *shenzhenGoClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.ShenzhenGo/CreateChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) ConnectPin(ctx context.Context, in *ConnectPinRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.ShenzhenGo/ConnectPin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.ShenzhenGo/DeleteChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) DisconnectPin(ctx context.Context, in *DisconnectPinRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.ShenzhenGo/DisconnectPin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.ShenzhenGo/Save", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) SetGraphProperties(ctx context.Context, in *SetGraphPropertiesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.ShenzhenGo/SetGraphProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) SetNodeProperties(ctx context.Context, in *SetNodePropertiesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.ShenzhenGo/SetNodeProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) SetPosition(ctx context.Context, in *SetPositionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.ShenzhenGo/SetPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShenzhenGo service

type ShenzhenGoServer interface {
	// CreateChannel makes a new channel.
	CreateChannel(context.Context, *CreateChannelRequest) (*Empty, error)
	// ConnectPin connects a pin to a channel.
	ConnectPin(context.Context, *ConnectPinRequest) (*Empty, error)
	// DeleteChannel deletes a channel (and all connections).
	DeleteChannel(context.Context, *DeleteChannelRequest) (*Empty, error)
	// DisconnectPin deletes the connection from a pin to a channel.
	DisconnectPin(context.Context, *DisconnectPinRequest) (*Empty, error)
	// Save saves the graph to disk.
	Save(context.Context, *SaveRequest) (*Empty, error)
	// SetGraphProperties changes metdata such as name and package path.
	SetGraphProperties(context.Context, *SetGraphPropertiesRequest) (*Empty, error)
	// SetNodeProperties changes node metadata such as name and multiplicity.
	SetNodeProperties(context.Context, *SetNodePropertiesRequest) (*Empty, error)
	// SetPosition changes the node position in the diagram.
	SetPosition(context.Context, *SetPositionRequest) (*Empty, error)
}

func RegisterShenzhenGoServer(s *grpc.Server, srv ShenzhenGoServer) {
	s.RegisterService(&_ShenzhenGo_serviceDesc, srv)
}

func _ShenzhenGo_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShenzhenGo/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_ConnectPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).ConnectPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShenzhenGo/ConnectPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).ConnectPin(ctx, req.(*ConnectPinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShenzhenGo/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_DisconnectPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectPinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).DisconnectPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShenzhenGo/DisconnectPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).DisconnectPin(ctx, req.(*DisconnectPinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShenzhenGo/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_SetGraphProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGraphPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).SetGraphProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShenzhenGo/SetGraphProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).SetGraphProperties(ctx, req.(*SetGraphPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_SetNodeProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodePropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).SetNodeProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShenzhenGo/SetNodeProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).SetNodeProperties(ctx, req.(*SetNodePropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_SetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).SetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShenzhenGo/SetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).SetPosition(ctx, req.(*SetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShenzhenGo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ShenzhenGo",
	HandlerType: (*ShenzhenGoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _ShenzhenGo_CreateChannel_Handler,
		},
		{
			MethodName: "ConnectPin",
			Handler:    _ShenzhenGo_ConnectPin_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ShenzhenGo_DeleteChannel_Handler,
		},
		{
			MethodName: "DisconnectPin",
			Handler:    _ShenzhenGo_DisconnectPin_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _ShenzhenGo_Save_Handler,
		},
		{
			MethodName: "SetGraphProperties",
			Handler:    _ShenzhenGo_SetGraphProperties_Handler,
		},
		{
			MethodName: "SetNodeProperties",
			Handler:    _ShenzhenGo_SetNodeProperties_Handler,
		},
		{
			MethodName: "SetPosition",
			Handler:    _ShenzhenGo_SetPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shenzhen-go.proto",
}

func init() { proto.RegisterFile("shenzhen-go.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xfd, 0xfc, 0xd9, 0x69, 0x9a, 0x49, 0x22, 0x25, 0xab, 0x08, 0xb6, 0xa0, 0xa2, 0xb0, 0x48,
	0x28, 0x17, 0x72, 0x28, 0x1c, 0x7a, 0x44, 0xa4, 0x50, 0x89, 0x03, 0x8a, 0x9c, 0x1b, 0x97, 0x68,
	0xeb, 0x8c, 0xe2, 0x05, 0x7b, 0x77, 0xb1, 0xb7, 0x50, 0xf7, 0x0f, 0xf0, 0xd3, 0xb8, 0xf3, 0x8b,
	0x90, 0xd7, 0x36, 0xb5, 0x8d, 0xa9, 0x28, 0xe2, 0x36, 0x33, 0xf6, 0x7b, 0x7e, 0x33, 0x7e, 0x33,
	0x30, 0x4d, 0x43, 0x94, 0xd7, 0x21, 0xca, 0x67, 0x7b, 0xb5, 0xd4, 0x89, 0x32, 0x8a, 0xb8, 0x5c,
	0x0b, 0xd6, 0x87, 0xde, 0xeb, 0x58, 0x9b, 0x8c, 0x3d, 0x81, 0xe1, 0x86, 0x7f, 0x46, 0x1f, 0x3f,
	0x5d, 0x62, 0x6a, 0xc8, 0x0c, 0x7a, 0xfb, 0x84, 0xeb, 0x90, 0x3a, 0x73, 0x67, 0x31, 0xf0, 0x8b,
	0x84, 0x7d, 0x75, 0xe0, 0x68, 0x83, 0xe6, 0x3c, 0x4f, 0xd6, 0x89, 0xd2, 0x98, 0x18, 0x81, 0xe9,
	0xad, 0x18, 0x42, 0xc0, 0x93, 0x3c, 0x46, 0xfa, 0xbf, 0x2d, 0xda, 0x98, 0x3c, 0x86, 0x91, 0xe6,
	0xc1, 0x47, 0xbe, 0xc7, 0xad, 0xe6, 0x26, 0xa4, 0xae, 0x7d, 0x36, 0x2c, 0x6b, 0x6b, 0x6e, 0x42,
	0x72, 0x0c, 0x20, 0xd2, 0x6d, 0xa0, 0xe2, 0x98, 0xcb, 0x1d, 0xf5, 0xe6, 0xce, 0xe2, 0xd0, 0x1f,
	0x88, 0x74, 0x55, 0x14, 0xd8, 0x1b, 0x98, 0x9d, 0x61, 0x84, 0x06, 0x57, 0x21, 0x97, 0x12, 0xa3,
	0xdb, 0x35, 0x50, 0xe8, 0x07, 0xc5, 0x7b, 0xa5, 0x8c, 0x2a, 0x65, 0xd7, 0x30, 0x5b, 0x25, 0xc8,
	0xff, 0x90, 0xa7, 0xab, 0x17, 0x02, 0x9e, 0xc9, 0x34, 0x96, 0x3d, 0xd8, 0x38, 0xaf, 0x71, 0xa9,
	0x64, 0x29, 0xdb, 0xc6, 0x64, 0x02, 0x6e, 0xc0, 0x35, 0xed, 0xcd, 0x9d, 0x85, 0xe7, 0xe7, 0x21,
	0xfb, 0xe6, 0x00, 0xdd, 0xa0, 0x79, 0xa7, 0x76, 0x78, 0x97, 0x61, 0xaa, 0xdd, 0x8d, 0x00, 0xb5,
	0xc3, 0x9f, 0xa2, 0xdc, 0x9a, 0x28, 0x0a, 0x7d, 0x94, 0xfc, 0x22, 0xc2, 0x6a, 0x74, 0x55, 0x4a,
	0x18, 0x8c, 0xe2, 0xcb, 0xc8, 0x08, 0x1d, 0x89, 0x40, 0x98, 0xcc, 0xea, 0x19, 0xfb, 0x8d, 0x5a,
	0xce, 0xf8, 0x85, 0x0b, 0x43, 0x0f, 0x0a, 0xf9, 0x79, 0x4c, 0x1e, 0xc2, 0x40, 0xf3, 0xc4, 0x6c,
	0x3f, 0xa4, 0x4a, 0xd2, 0xbe, 0xfd, 0xd4, 0x61, 0x5e, 0x78, 0x9b, 0x2a, 0xc9, 0xde, 0x03, 0xd9,
	0xa0, 0x59, 0xab, 0x54, 0x18, 0xa1, 0xe4, 0xdd, 0x5b, 0x18, 0x81, 0x73, 0x65, 0xf5, 0xbb, 0xbe,
	0x73, 0x95, 0x67, 0x99, 0x95, 0xed, 0xfa, 0x4e, 0xc6, 0x7c, 0x98, 0x9d, 0x89, 0x34, 0x50, 0x52,
	0x62, 0x60, 0xd6, 0xe2, 0x2f, 0xd8, 0x27, 0xe0, 0x6a, 0x21, 0xcb, 0xf9, 0xe4, 0x21, 0x13, 0x30,
	0x5d, 0xfd, 0x4b, 0xc2, 0xba, 0xc1, 0xbc, 0x86, 0xc1, 0x4e, 0xbe, 0xbb, 0x00, 0x9b, 0x72, 0xf7,
	0xce, 0x15, 0x39, 0x85, 0x71, 0xc3, 0x6f, 0xe4, 0x68, 0xc9, 0xb5, 0x58, 0x76, 0x79, 0xf0, 0x01,
	0xd8, 0x47, 0xc5, 0x7a, 0xfe, 0x47, 0x4e, 0x00, 0x6e, 0x34, 0x93, 0x7b, 0x05, 0xac, 0xdd, 0x44,
	0x0b, 0x73, 0x0a, 0xe3, 0xc6, 0x96, 0x94, 0x5f, 0xeb, 0xda, 0x9c, 0x0e, 0x64, 0x7d, 0xea, 0x15,
	0xb2, 0xe3, 0x4f, 0xb4, 0x90, 0x4f, 0xc1, 0xcb, 0x0f, 0x09, 0x99, 0xd8, 0x6a, 0xed, 0xa6, 0xb4,
	0xde, 0x7b, 0x65, 0x3d, 0xd3, 0x3a, 0x25, 0xe4, 0x51, 0x81, 0xfa, 0xdd, 0x8d, 0x69, 0x71, 0xbc,
	0x84, 0xe9, 0x2f, 0x0b, 0x44, 0x8e, 0x2b, 0x8a, 0xce, 0xc5, 0x6a, 0x31, 0xbc, 0x80, 0x61, 0xcd,
	0xb9, 0xe4, 0x7e, 0x85, 0x6d, 0x79, 0xb9, 0x89, 0xba, 0x38, 0xb0, 0x17, 0xf4, 0xf9, 0x8f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x8d, 0xe9, 0x03, 0xf9, 0x56, 0x05, 0x00, 0x00,
}
