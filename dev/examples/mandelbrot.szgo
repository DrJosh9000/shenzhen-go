{
	"name": "Mandelbrot renderer",
	"package_path": "github.com/google/shenzhen-go/dev/examples/mandelbrot",
	"imports": [
		"\"fmt\"",
		"\"image\"",
		"\"image/png\"",
		"\"image/color\"",
		"\"io\"",
		"\"net/http\"",
		"\"os\"",
		"\"strings\"",
		"\"strconv\"",
		"\"github.com/google/shenzhen-go/dev/parts/partlib\""
	],
	"is_command": true,
	"nodes": {
		"HTTP server": {
			"name": "HTTP server",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"address": "Addr",
				"handlers": {
					"/": "Root",
					"/img": "Render"
				},
				"errors": "Errors"
			},
			"part_type": "HTTPServer"
		},
		"Handle /": {
			"name": "Handle /",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"for req := range Root {",
					"\tio.Copy(req, strings.NewReader(`\u003chead\u003e\u003ctitle\u003eMandelbrot explorer\u003c/title\u003e\u003c/head\u003e",
					"\u003cbody\u003e",
					"\u003cimg srcset=\"/img?w=640\u0026h=480 1x, /img?w=1280\u0026h=960 2x\" src=\"/img?w=640\u0026h=480\" /\u003e",
					"\u003c/body\u003e",
					"`))",
					"\treq.Close()",
					"}"
				],
				"tail": [
					""
				]
			},
			"part_type": "Code"
		},
		"Handle /img": {
			"name": "Handle /img",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"// TODO: shard up work to do, and farm out to N workers",
					"",
					"for req := range Render {",
					"\tw, h := 640, 480",
					"\tq := req.Info().URL.Query()",
					"\tif h0, err := strconv.Atoi(q.Get(\"h\")); err == nil {",
					"\t\th = h0",
					"\t}",
					"\tif w0, err := strconv.Atoi(q.Get(\"w\")); err == nil {",
					"\t\tw = w0",
					"\t}",
					"",
					"\timg := image.NewRGBA(image.Rect(0, 0, w, h))",
					"\tfor x := 0; x \u003c w; x++ {",
					"\t\tfor y := 0; y \u003c h; y++ {",
					"\t\t\tc := complex(float64(x-w/2)/float64(w/4), float64(y-h/2)/float64(w/4))",
					"\t\t\tvar z complex128",
					"\t\t\timg.Set(x, y, color.Black)",
					"\t\t\tfor i := 0; i \u003c 30; i++ {",
					"\t\t\t\tz = z*z + c",
					"\t\t\t\tif real(z)*real(z)+imag(z)*imag(z) \u003e 4.0 {",
					"\t\t\t\t\timg.Set(x, y, color.White)",
					"\t\t\t\t\tbreak",
					"\t\t\t\t}",
					"\t\t\t}",
					"\t\t}",
					"\t}",
					"",
					"\treq.Header().Set(\"Content-Type\", \"image/png\")",
					"\tpng.Encode(req, img)",
					"\treq.Close()",
					"}"
				],
				"tail": [
					""
				]
			},
			"part_type": "Code"
		},
		"Log errors": {
			"name": "Log errors",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"for err := range Errors {",
					"\tif err == nil {",
					"\t\tcontinue",
					"\t}",
					"\tfmt.Fprintf(os.Stderr, \"HTTP Server error: %v\", err)",
					"}"
				],
				"tail": [
					""
				]
			},
			"part_type": "Code"
		},
		"Send listen address": {
			"name": "Send listen address",
			"wait": true,
			"multiplicity": 1,
			"part": {
				"head": [
					""
				],
				"body": [
					"addr := \"localhost:28082\"",
					"fmt.Printf(\"About to run a webserver at http://%s\\n\", addr)",
					"Addr \u003c- addr"
				],
				"tail": [
					""
				]
			},
			"part_type": "Code"
		}
	},
	"channels": {
		"Addr": {
			"name": "Addr",
			"type": "string",
			"cap": 0
		},
		"Errors": {
			"name": "Errors",
			"type": "error",
			"cap": 0
		},
		"Render": {
			"name": "Render",
			"type": "partlib.HTTPRequest",
			"cap": 0
		},
		"Root": {
			"name": "Root",
			"type": "partlib.HTTPRequest",
			"cap": 0
		}
	}
}
