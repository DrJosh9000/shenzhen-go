// The http_server command was automatically generated by Shenzhen Go.
package main

import (
	"context"
	"fmt"
	"github.com/google/shenzhen-go/dev/parts"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"log"
	"net/http"
	"os"
	"os/signal"
	"runtime"
	"strconv"
	"sync"
	"time"
)

var _ = runtime.Compiler

var (
	httpServeMuxRequestsIn = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Namespace: "shenzhen_go",
			Subsystem: "httpservemux",
			Name:      "requests_in",
			Help:      "Requests received by HTTPServeMux nodes.",
		},
		[]string{"node_name", "instance_num"},
	)
	httpServeMuxRequestsOut = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Namespace: "shenzhen_go",
			Subsystem: "httpservemux",
			Name:      "requests_out",
			Help:      "Requests sent out of HTTPServeMux nodes.",
		},
		[]string{"node_name", "instance_num", "output_pin"},
	)
)

func init() {
	prometheus.MustRegister(
		httpServeMuxRequestsIn,
		httpServeMuxRequestsOut,
	)
}

func HTTPServeMux(metrics chan<- *parts.HTTPRequest, requests <-chan *parts.HTTPRequest, root chan<- *parts.HTTPRequest) {
	multiplicity := runtime.NumCPU()
	mux := http.NewServeMux()
	outLabels := make(map[parts.HTTPHandler]string)
	mux.Handle("/", parts.HTTPHandler(root))
	outLabels[root] = "root"
	mux.Handle("/metrics", parts.HTTPHandler(metrics))
	outLabels[metrics] = "metrics"

	defer func() {
		close(root)
		close(metrics)

	}()
	var multWG sync.WaitGroup
	multWG.Add(multiplicity)
	defer multWG.Wait()
	for n := 0; n < multiplicity; n++ {
		instanceNumber := n
		go func() {
			defer multWG.Done()

			labels := prometheus.Labels{
				"node_name":    "HTTPServeMux",
				"instance_num": strconv.Itoa(instanceNumber),
			}
			reqsIn := httpServeMuxRequestsIn.With(labels)
			reqsOut := httpServeMuxRequestsOut.MustCurryWith(labels)
			for req := range requests {
				reqsIn.Inc()
				// Borrow fix for Go issues #3692 and #5955.
				if req.Request.RequestURI == "*" {
					if req.Request.ProtoAtLeast(1, 1) {
						req.ResponseWriter.Header().Set("Connection", "close")
					}
					req.ResponseWriter.WriteHeader(http.StatusBadRequest)
					req.Close()
					continue
				}
				h, _ := mux.Handler(req.Request)
				hh, ok := h.(parts.HTTPHandler)
				if !ok {
					// ServeMux may return handlers that weren't added in the head.
					h.ServeHTTP(req.ResponseWriter, req.Request)
					req.Close()
					continue
				}
				reqsOut.With(prometheus.Labels{"output_pin": outLabels[hh]}).Inc()
				hh <- req
			}
		}()
	}
}

func HTTPServer(errors chan<- error, manager <-chan parts.HTTPServerManager, requests chan<- *parts.HTTPRequest) {

	defer func() {
		close(requests)
		if errors != nil {
			close(errors)
		}
	}()

	for mgr := range manager {
		svr := &http.Server{
			Handler: parts.HTTPHandler(requests),
			Addr:    mgr.Addr(),
		}
		done := make(chan struct{})
		go func() {
			if err := svr.ListenAndServe(); err != nil && errors != nil {
				errors <- err
			}
			close(done)
		}()
		if err := svr.Shutdown(mgr.Wait()); err != nil && errors != nil {
			errors <- err
		}
		<-done
	}
}

func Hello_World(requests <-chan *parts.HTTPRequest) {
	multiplicity := runtime.NumCPU()

	var multWG sync.WaitGroup
	multWG.Add(multiplicity)
	defer multWG.Wait()
	for n := 0; n < multiplicity; n++ {
		go func() {
			defer multWG.Done()
			for rw := range requests {
				rw.Write([]byte("Hello, HTTP!\n"))
				rw.Close()
			}
		}()
	}
}

func Log_errors(errors <-chan error) {

	for err := range errors {
		log.Printf("HTTP server: %v", err)
	}
}

func Metrics(requests <-chan *parts.HTTPRequest) {
	multiplicity := runtime.NumCPU()

	var multWG sync.WaitGroup
	multWG.Add(multiplicity)
	defer multWG.Wait()
	for n := 0; n < multiplicity; n++ {
		go func() {
			defer multWG.Done()
			h := promhttp.Handler()
			for r := range requests {
				h.ServeHTTP(r.ResponseWriter, r.Request)
				r.Close()
			}
		}()
	}
}

func Send_a_manager(manager chan<- parts.HTTPServerManager) {

	defer func() {
		close(manager)
	}()
	mgr := parts.NewHTTPServerManager(":8765")
	manager <- mgr

	sig := make(chan os.Signal, 1)
	signal.Notify(sig, os.Interrupt)
	fmt.Println("Press Ctrl-C (or SIGINT) to shut down.")
	<-sig

	timeout := 5 * time.Second
	fmt.Printf("Shutting down within %v...\n", timeout)
	ctx, canc := context.WithTimeout(context.Background(), timeout)
	mgr.Shutdown(ctx)
	time.Sleep(timeout)
	canc()
}

func main() {

	channel0 := make(chan *parts.HTTPRequest, 0)
	channel1 := make(chan parts.HTTPServerManager, 0)
	channel2 := make(chan error, 0)
	channel3 := make(chan *parts.HTTPRequest, 0)
	channel4 := make(chan *parts.HTTPRequest, 0)

	var wg sync.WaitGroup

	wg.Add(1)
	go func() {
		HTTPServeMux(channel3, channel0, channel4)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		HTTPServer(channel2, channel1, channel0)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		Hello_World(channel4)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		Log_errors(channel2)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		Metrics(channel3)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		Send_a_manager(channel1)
		wg.Done()
	}()

	// Wait for the various goroutines to finish.
	wg.Wait()
}
