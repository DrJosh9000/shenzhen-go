// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shenzhen-go.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	shenzhen-go.proto

It has these top-level messages:
	Empty
	NodePin
	ChannelConfig
	NodeConfig
	SaveRequest
	SetChannelRequest
	SetGraphPropertiesRequest
	SetNodeRequest
	SetPositionRequest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NodePin struct {
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Pin  string `protobuf:"bytes,2,opt,name=pin" json:"pin,omitempty"`
}

func (m *NodePin) Reset()                    { *m = NodePin{} }
func (m *NodePin) String() string            { return proto1.CompactTextString(m) }
func (*NodePin) ProtoMessage()               {}
func (*NodePin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodePin) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *NodePin) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

type ChannelConfig struct {
	Name string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type string     `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Cap  uint64     `protobuf:"varint,3,opt,name=cap" json:"cap,omitempty"`
	Pins []*NodePin `protobuf:"bytes,4,rep,name=pins" json:"pins,omitempty"`
}

func (m *ChannelConfig) Reset()                    { *m = ChannelConfig{} }
func (m *ChannelConfig) String() string            { return proto1.CompactTextString(m) }
func (*ChannelConfig) ProtoMessage()               {}
func (*ChannelConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ChannelConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ChannelConfig) GetCap() uint64 {
	if m != nil {
		return m.Cap
	}
	return 0
}

func (m *ChannelConfig) GetPins() []*NodePin {
	if m != nil {
		return m.Pins
	}
	return nil
}

type NodeConfig struct {
	Name         string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Enabled      bool    `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	Multiplicity uint32  `protobuf:"varint,3,opt,name=multiplicity" json:"multiplicity,omitempty"`
	Wait         bool    `protobuf:"varint,4,opt,name=wait" json:"wait,omitempty"`
	PartCfg      []byte  `protobuf:"bytes,5,opt,name=part_cfg,json=partCfg,proto3" json:"part_cfg,omitempty"`
	PartType     string  `protobuf:"bytes,6,opt,name=part_type,json=partType" json:"part_type,omitempty"`
	X            float64 `protobuf:"fixed64,7,opt,name=x" json:"x,omitempty"`
	Y            float64 `protobuf:"fixed64,8,opt,name=y" json:"y,omitempty"`
}

func (m *NodeConfig) Reset()                    { *m = NodeConfig{} }
func (m *NodeConfig) String() string            { return proto1.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()               {}
func (*NodeConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NodeConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *NodeConfig) GetMultiplicity() uint32 {
	if m != nil {
		return m.Multiplicity
	}
	return 0
}

func (m *NodeConfig) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

func (m *NodeConfig) GetPartCfg() []byte {
	if m != nil {
		return m.PartCfg
	}
	return nil
}

func (m *NodeConfig) GetPartType() string {
	if m != nil {
		return m.PartType
	}
	return ""
}

func (m *NodeConfig) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *NodeConfig) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type SaveRequest struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
}

func (m *SaveRequest) Reset()                    { *m = SaveRequest{} }
func (m *SaveRequest) String() string            { return proto1.CompactTextString(m) }
func (*SaveRequest) ProtoMessage()               {}
func (*SaveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SaveRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

type SetChannelRequest struct {
	Graph   string         `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Channel string         `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Config  *ChannelConfig `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *SetChannelRequest) Reset()                    { *m = SetChannelRequest{} }
func (m *SetChannelRequest) String() string            { return proto1.CompactTextString(m) }
func (*SetChannelRequest) ProtoMessage()               {}
func (*SetChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SetChannelRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *SetChannelRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SetChannelRequest) GetConfig() *ChannelConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type SetGraphPropertiesRequest struct {
	Graph       string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PackagePath string `protobuf:"bytes,3,opt,name=package_path,json=packagePath" json:"package_path,omitempty"`
	IsCommand   bool   `protobuf:"varint,4,opt,name=is_command,json=isCommand" json:"is_command,omitempty"`
}

func (m *SetGraphPropertiesRequest) Reset()                    { *m = SetGraphPropertiesRequest{} }
func (m *SetGraphPropertiesRequest) String() string            { return proto1.CompactTextString(m) }
func (*SetGraphPropertiesRequest) ProtoMessage()               {}
func (*SetGraphPropertiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SetGraphPropertiesRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *SetGraphPropertiesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetGraphPropertiesRequest) GetPackagePath() string {
	if m != nil {
		return m.PackagePath
	}
	return ""
}

func (m *SetGraphPropertiesRequest) GetIsCommand() bool {
	if m != nil {
		return m.IsCommand
	}
	return false
}

type SetNodeRequest struct {
	Graph  string      `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Node   string      `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Config *NodeConfig `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *SetNodeRequest) Reset()                    { *m = SetNodeRequest{} }
func (m *SetNodeRequest) String() string            { return proto1.CompactTextString(m) }
func (*SetNodeRequest) ProtoMessage()               {}
func (*SetNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SetNodeRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *SetNodeRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SetNodeRequest) GetConfig() *NodeConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type SetPositionRequest struct {
	Graph string  `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Node  string  `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	X     float64 `protobuf:"fixed64,3,opt,name=x" json:"x,omitempty"`
	Y     float64 `protobuf:"fixed64,4,opt,name=y" json:"y,omitempty"`
}

func (m *SetPositionRequest) Reset()                    { *m = SetPositionRequest{} }
func (m *SetPositionRequest) String() string            { return proto1.CompactTextString(m) }
func (*SetPositionRequest) ProtoMessage()               {}
func (*SetPositionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SetPositionRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *SetPositionRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SetPositionRequest) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *SetPositionRequest) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*NodePin)(nil), "proto.NodePin")
	proto1.RegisterType((*ChannelConfig)(nil), "proto.ChannelConfig")
	proto1.RegisterType((*NodeConfig)(nil), "proto.NodeConfig")
	proto1.RegisterType((*SaveRequest)(nil), "proto.SaveRequest")
	proto1.RegisterType((*SetChannelRequest)(nil), "proto.SetChannelRequest")
	proto1.RegisterType((*SetGraphPropertiesRequest)(nil), "proto.SetGraphPropertiesRequest")
	proto1.RegisterType((*SetNodeRequest)(nil), "proto.SetNodeRequest")
	proto1.RegisterType((*SetPositionRequest)(nil), "proto.SetPositionRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ShenzhenGo service

type ShenzhenGoClient interface {
	// Save saves the graph to disk.
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*Empty, error)
	// SetNode either creates a new channel (name == "", config != nil)
	// changes existing channel data such as name and attached pins (name is found, config != nil),
	// or deletes a channel (name is found, config == nil).
	SetChannel(ctx context.Context, in *SetChannelRequest, opts ...grpc.CallOption) (*Empty, error)
	// SetGraphProperties changes metdata such as name and package path.
	SetGraphProperties(ctx context.Context, in *SetGraphPropertiesRequest, opts ...grpc.CallOption) (*Empty, error)
	// SetNode either creates a new node (name == "", config != nil)
	// changes existing node such as name and multiplicity (name is found, config != nil),
	// or deletes a node (name is found, config == nil).
	SetNode(ctx context.Context, in *SetNodeRequest, opts ...grpc.CallOption) (*Empty, error)
	// SetPosition changes the node position in the diagram.
	SetPosition(ctx context.Context, in *SetPositionRequest, opts ...grpc.CallOption) (*Empty, error)
}

type shenzhenGoClient struct {
	cc *grpc.ClientConn
}

func NewShenzhenGoClient(cc *grpc.ClientConn) ShenzhenGoClient {
	return &shenzhenGoClient{cc}
}

func (c *shenzhenGoClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.ShenzhenGo/Save", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) SetChannel(ctx context.Context, in *SetChannelRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.ShenzhenGo/SetChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) SetGraphProperties(ctx context.Context, in *SetGraphPropertiesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.ShenzhenGo/SetGraphProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) SetNode(ctx context.Context, in *SetNodeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.ShenzhenGo/SetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhenGoClient) SetPosition(ctx context.Context, in *SetPositionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.ShenzhenGo/SetPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShenzhenGo service

type ShenzhenGoServer interface {
	// Save saves the graph to disk.
	Save(context.Context, *SaveRequest) (*Empty, error)
	// SetNode either creates a new channel (name == "", config != nil)
	// changes existing channel data such as name and attached pins (name is found, config != nil),
	// or deletes a channel (name is found, config == nil).
	SetChannel(context.Context, *SetChannelRequest) (*Empty, error)
	// SetGraphProperties changes metdata such as name and package path.
	SetGraphProperties(context.Context, *SetGraphPropertiesRequest) (*Empty, error)
	// SetNode either creates a new node (name == "", config != nil)
	// changes existing node such as name and multiplicity (name is found, config != nil),
	// or deletes a node (name is found, config == nil).
	SetNode(context.Context, *SetNodeRequest) (*Empty, error)
	// SetPosition changes the node position in the diagram.
	SetPosition(context.Context, *SetPositionRequest) (*Empty, error)
}

func RegisterShenzhenGoServer(s *grpc.Server, srv ShenzhenGoServer) {
	s.RegisterService(&_ShenzhenGo_serviceDesc, srv)
}

func _ShenzhenGo_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ShenzhenGo/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_SetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).SetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ShenzhenGo/SetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).SetChannel(ctx, req.(*SetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_SetGraphProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGraphPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).SetGraphProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ShenzhenGo/SetGraphProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).SetGraphProperties(ctx, req.(*SetGraphPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_SetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).SetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ShenzhenGo/SetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).SetNode(ctx, req.(*SetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShenzhenGo_SetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhenGoServer).SetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ShenzhenGo/SetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhenGoServer).SetPosition(ctx, req.(*SetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShenzhenGo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ShenzhenGo",
	HandlerType: (*ShenzhenGoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _ShenzhenGo_Save_Handler,
		},
		{
			MethodName: "SetChannel",
			Handler:    _ShenzhenGo_SetChannel_Handler,
		},
		{
			MethodName: "SetGraphProperties",
			Handler:    _ShenzhenGo_SetGraphProperties_Handler,
		},
		{
			MethodName: "SetNode",
			Handler:    _ShenzhenGo_SetNode_Handler,
		},
		{
			MethodName: "SetPosition",
			Handler:    _ShenzhenGo_SetPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shenzhen-go.proto",
}

func init() { proto1.RegisterFile("shenzhen-go.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x25, 0x6d, 0xda, 0xb4, 0xd3, 0xee, 0x8a, 0x5a, 0x8b, 0x94, 0x82, 0x90, 0x42, 0xb8, 0x14,
	0x04, 0x0b, 0x2a, 0x12, 0xe2, 0x5e, 0xc1, 0xde, 0x50, 0xe5, 0x70, 0xe2, 0x52, 0x79, 0x53, 0x37,
	0xb1, 0x68, 0x6c, 0x6f, 0xe3, 0x85, 0x2d, 0x3f, 0xc0, 0x8f, 0xf0, 0x2d, 0x7c, 0x17, 0xf2, 0xc4,
	0x55, 0xd3, 0x14, 0x15, 0xed, 0x29, 0x33, 0x13, 0x3f, 0xcf, 0xbc, 0xf7, 0xc6, 0x30, 0x2a, 0x73,
	0x2e, 0x7f, 0xe6, 0x5c, 0xbe, 0xce, 0xd4, 0xa5, 0xde, 0x28, 0xa3, 0x48, 0x07, 0x3f, 0x71, 0x00,
	0x9d, 0x8f, 0x85, 0x36, 0xdb, 0xf8, 0x0d, 0x04, 0x9f, 0xd5, 0x92, 0xcf, 0x85, 0x24, 0x04, 0x7c,
	0xa9, 0x96, 0x3c, 0xf4, 0x22, 0x6f, 0xd2, 0xa7, 0x18, 0x93, 0x87, 0xd0, 0xd6, 0x42, 0x86, 0x2d,
	0x2c, 0xd9, 0x30, 0x2e, 0xe0, 0x6c, 0x96, 0x33, 0x29, 0xf9, 0x7a, 0xa6, 0xe4, 0x4a, 0x64, 0x08,
	0x63, 0xc5, 0x1e, 0xc6, 0x0a, 0x6e, 0x6b, 0x66, 0xab, 0xb9, 0xc3, 0x61, 0x6c, 0xaf, 0x4a, 0x99,
	0x0e, 0xdb, 0x91, 0x37, 0xf1, 0xa9, 0x0d, 0x49, 0x0c, 0xbe, 0x16, 0xb2, 0x0c, 0xfd, 0xa8, 0x3d,
	0x19, 0x4c, 0xcf, 0xab, 0x09, 0x2f, 0xdd, 0x38, 0x14, 0xff, 0xc5, 0x7f, 0x3c, 0x00, 0x5b, 0x39,
	0xd1, 0x2c, 0x84, 0x80, 0x4b, 0x76, 0xbd, 0xe6, 0x4b, 0xec, 0xd7, 0xa3, 0xbb, 0x94, 0xc4, 0x30,
	0x2c, 0x6e, 0xd7, 0x46, 0xe8, 0xb5, 0x48, 0x85, 0xd9, 0x62, 0xef, 0x33, 0x7a, 0x50, 0xb3, 0x37,
	0xfe, 0x60, 0xc2, 0x84, 0x3e, 0x42, 0x31, 0x26, 0x63, 0xe8, 0x69, 0xb6, 0x31, 0x8b, 0x74, 0x95,
	0x85, 0x9d, 0xc8, 0x9b, 0x0c, 0x69, 0x60, 0xf3, 0xd9, 0x2a, 0x23, 0x4f, 0xa0, 0x8f, 0xbf, 0x90,
	0x5e, 0x17, 0xa7, 0xc0, 0xb3, 0x5f, 0x2c, 0xc5, 0x21, 0x78, 0x77, 0x61, 0x10, 0x79, 0x13, 0x8f,
	0x7a, 0x77, 0x36, 0xdb, 0x86, 0xbd, 0x2a, 0xdb, 0xc6, 0xcf, 0x61, 0x90, 0xb0, 0xef, 0x9c, 0xf2,
	0x9b, 0x5b, 0x5e, 0x1a, 0x72, 0x01, 0x9d, 0x6c, 0xc3, 0x74, 0xee, 0x98, 0x54, 0x49, 0x7c, 0x03,
	0xa3, 0x84, 0x1b, 0xa7, 0xef, 0xc9, 0xa3, 0x96, 0x75, 0x5a, 0x9d, 0x73, 0x2a, 0xef, 0x52, 0xf2,
	0x0a, 0xba, 0x29, 0xaa, 0x85, 0x7c, 0x07, 0xd3, 0x0b, 0x27, 0xec, 0x81, 0x6d, 0xd4, 0x9d, 0x89,
	0x7f, 0x79, 0x30, 0x4e, 0xb8, 0xb9, 0xb2, 0x97, 0xce, 0x37, 0x4a, 0xf3, 0x8d, 0x11, 0xbc, 0x3c,
	0xdd, 0x7b, 0xe7, 0x42, 0xab, 0xe6, 0xc2, 0x33, 0x18, 0x6a, 0x96, 0x7e, 0x63, 0x19, 0x5f, 0x68,
	0x66, 0x72, 0xec, 0xdd, 0xa7, 0x03, 0x57, 0x9b, 0x33, 0x93, 0x93, 0xa7, 0x00, 0xa2, 0x5c, 0xa4,
	0xaa, 0x28, 0x98, 0x5c, 0x3a, 0xc1, 0xfb, 0xa2, 0x9c, 0x55, 0x85, 0x98, 0xc3, 0x79, 0xc2, 0x8d,
	0x35, 0xfb, 0xff, 0xdd, 0xed, 0x9e, 0xb6, 0x6a, 0x7b, 0xfa, 0xa2, 0xc1, 0x79, 0x54, 0x5b, 0xa6,
	0x06, 0xe1, 0xaf, 0x40, 0x12, 0x6e, 0xe6, 0xaa, 0x14, 0x46, 0x28, 0x79, 0xff, 0x56, 0x68, 0x72,
	0xfb, 0xc0, 0x64, 0xdf, 0x99, 0x3c, 0xfd, 0xdd, 0x02, 0x48, 0xdc, 0x9b, 0xbb, 0x52, 0xe4, 0x25,
	0xf8, 0xd6, 0x73, 0x42, 0xdc, 0x34, 0xb5, 0x05, 0x78, 0x3c, 0x74, 0xb5, 0xea, 0x19, 0x3e, 0x20,
	0xef, 0x01, 0xf6, 0xd6, 0x93, 0x70, 0x87, 0x68, 0x6e, 0xc3, 0x11, 0xee, 0x13, 0xd2, 0x69, 0xd8,
	0x47, 0xa2, 0x3d, 0xfe, 0xdf, 0xce, 0x1e, 0xdd, 0xf3, 0x16, 0x02, 0xa7, 0x3e, 0x79, 0xb4, 0x07,
	0xd7, 0xdc, 0x38, 0x42, 0x7c, 0x80, 0x41, 0x4d, 0x48, 0x32, 0xde, 0xa3, 0x1a, 0xe2, 0x36, 0x91,
	0xd7, 0x5d, 0x4c, 0xdf, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x60, 0x1c, 0xe8, 0x3c, 0xa0, 0x04,
	0x00, 0x00,
}
